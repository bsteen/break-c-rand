︠995223f2-4f12-404b-90b7-082aacc1f0e1s︠
# Python implementation of C RNG
def crand(seed):
    r=[]
    r.append(seed)
    for i in range(30):
        r.append((16807*r[-1]) % 2147483647)
        if r[-1] < 0:
            r[-1] += 2147483647
    for i in range(31, 34):
        r.append(r[len(r)-31])
    for i in range(34, 344):
        r.append((r[len(r)-31] + r[len(r)-3]) % 2**32)
    while True:
        next = r[len(r)-31]+r[len(r)-3] % 2**32
        r.append(next)
        yield (next >> 1 if next < 2**32 else (next % 2**32) >> 1)


# Generate and return the first n terms of crand for a given seed
def pseudo_rand(seed, n):
    results = [Integer(seed)]
    for i in range(1, 31):
        results.append((16807*results[-1]) % 2147483647)
    results.append(results[0])
    results.append(results[1])
    results.append(results[2])
    for i in range(34, 344):
        results.append((results[-31]+results[-3]) % 2**32)
    output = []
    for i in range(n):
        results.append((results[-31]+results[-3]) % 2**32)
        output.append(results[-1] >> 1)
    return output

class VariableGenerator(object):
    def __init__(self, prefix):
        self.__prefix = prefix

    @cached_method
    def __getitem__(self, key):
        return SR.var("%s%s"%(self.__prefix,key))

def eq2vec(eq):
    return [eq.coefficient(a[i]) for i in range(31)]

def aa(n):
    if n in answers:
        return answers[n]
    elif n <= 30:
        answers[n] = a[n]
        return a[n]
    elif n <= 33:
        answers[n] = aa(n-31)
        return answers[n]
    else:
        answers[n] =  aa(n-31) + aa(n-3)
        return answers[n]

# Returns whether a subsequence was found within a larger sequence
# Also returns the index in larger sequence where start of the subsequence was found
def find_subsequence(sub_seq, seq):
    for i in range(len(seq) - len(sub_seq) + 1):
        contains_sub_seq = True
        for j in range(len(sub_seq)):
            if i + j >= len(seq) or sub_seq[j] != seq[i + j]:
                contains_sub_seq = False
                break;
        if contains_sub_seq:
            return True, i
    return False, -1

# My code to break the C RNG and guess the next 93 numbers
def breaker(theinput):
    R=IntegerModRing(2**32)

    V = [eq2vec(aa(344 + i)) for i in range(31)]
    M = Matrix(R, V)
    IM = M.inverse()

    inv_c = map(lambda x: Integer(x) if x < 2**31 else Integer(x) % 2**32, IM[0])
    non_zeros = len(inv_c) - inv_c.count(0)
    print non_zeros, "non-zero values found (%d combinations to test)..." % (2**non_zeros)

    for i in range(2**non_zeros):
        m2s = Integer(i).digits(base=2, padto=non_zeros)
        seed = R(0)
        index2s = 0
        for i in range(31):
            if inv_c[i] != 0:
                if inv_c[i] > 2**31:
                    inv_c[i] = inv_c[i] - 2**32
                seed += R((theinput[i]*2 + m2s[index2s])*inv_c[i])
                index2s += 1

        guess = pseudo_rand(seed, 100)
        result = find_subsequence(theinput, guess)

        if result[0]:
            print "FOUND THE SEED: ", seed
            print "Number of terms already generated by rand:", result[1] + len(theinput)
            new_generator = crand(int(seed))
            for i in range(result[1] + len(theinput)):
                temp = new_generator.next()
            next_93 = [new_generator.next() for i in range(93)]
            return next_93

    print "Nothing found"
    return []

# MAIN CODE
theseed = randint(1, 2**30)
skip = randint(10000, 200000)

my_generator = crand(theseed)
# for i in range(skip):
#     temp = my_generator.next()

# First 93 number to analyze
the_input = [my_generator.next() for i in range(93)]
# Next 93 numbers to guess
the_output = [my_generator.next() for i in range(93)]

a=VariableGenerator('a')
answers={}
next_numbers = breaker(the_input)

if next_numbers == the_output:
    print "You win!"
else:
    print "Try again"

print "Actual output:", the_output
print "Calc'd output:", next_numbers
︡dd5975a1-37c2-4ad0-9cef-6a38e72a1a98︡{"stdout":"13 non-zero values found (8192 combinations to test)...\nFOUND THE SEED: "}︡{"stdout":" 432033543\nNumber of terms already generated by rand: 93\n"}︡{"stdout":"You win!\n"}︡{"stdout":"Actual output: [2038288484, 123523905, 1218300832, 999773413, 285761482, 1460387374, 1332570839, 282719369, 1829850974, 333987109, 1585231659, 143387691, 1181169988, 567585235, 1532889162, 1701028364, 30794647, 1888027870, 1095093402, 645983501, 50102086, 66406414, 1198426962, 1429303174, 1879334341, 838261816, 491682056, 624718293, 2041767481, 717390911, 992541351, 1932572317, 840914816, 63358535, 784862082, 1126676298, 1523745909, 2117432921, 1409395667, 1206113235, 303936383, 847143679, 1349500926, 1485106371, 1414728914, 734906440, 1038651087, 1445523561, 475450662, 2133744490, 2091507062, 525552749, 52667256, 1142450376, 1954855923, 1932001597, 1980712192, 299054331, 409236242, 1874996025, 1016445242, 1401777593, 1660084694, 1857360058, 1465136128, 297463128, 836552708, 841398390, 267412402, 98464728, 2047511625, 571348785, 945608407, 1249528904, 2056455156, 212853673, 1984435344, 947622595, 1658377234, 312402359, 933883437, 1602400648, 837955108, 986550693, 597367376, 645327383, 771068642, 430595920, 944381714, 1180304884, 158108298, 1960826956, 434598829]\n"}︡{"stdout":"Calc'd output: [2038288484, 123523905, 1218300832, 999773413, 285761482, 1460387374, 1332570839, 282719369, 1829850974, 333987109, 1585231659, 143387691, 1181169988, 567585235, 1532889162, 1701028364, 30794647, 1888027870, 1095093402, 645983501, 50102086, 66406414, 1198426962, 1429303174, 1879334341, 838261816, 491682056, 624718293, 2041767481, 717390911, 992541351, 1932572317, 840914816, 63358535, 784862082, 1126676298, 1523745909, 2117432921, 1409395667, 1206113235, 303936383, 847143679, 1349500926, 1485106371, 1414728914, 734906440, 1038651087, 1445523561, 475450662, 2133744490, 2091507062, 525552749, 52667256, 1142450376, 1954855923, 1932001597, 1980712192, 299054331, 409236242, 1874996025, 1016445242, 1401777593, 1660084694, 1857360058, 1465136128, 297463128, 836552708, 841398390, 267412402, 98464728, 2047511625, 571348785, 945608407, 1249528904, 2056455156, 212853673, 1984435344, 947622595, 1658377234, 312402359, 933883437, 1602400648, 837955108, 986550693, 597367376, 645327383, 771068642, 430595920, 944381714, 1180304884, 158108298, 1960826956, 434598829]\n"}︡{"done":true}︡
︠7a2128ae-ffd2-42b4-8502-3b34e8778c42︠









